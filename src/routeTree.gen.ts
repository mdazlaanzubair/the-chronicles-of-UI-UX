/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as RoutesImport } from "./routes/routes";
import { Route as ProjectsImport } from "./routes/projects";
import { Route as ContactImport } from "./routes/contact";
import { Route as CaseStudiesImport } from "./routes/work";
import { Route as AboutImport } from "./routes/about";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const RoutesRoute = RoutesImport.update({
  id: "/routes",
  path: "/routes",
  getParentRoute: () => rootRoute,
} as any);

const ProjectsRoute = ProjectsImport.update({
  id: "/projects",
  path: "/projects",
  getParentRoute: () => rootRoute,
} as any);

const ContactRoute = ContactImport.update({
  id: "/contact",
  path: "/contact",
  getParentRoute: () => rootRoute,
} as any);

const CaseStudiesRoute = CaseStudiesImport.update({
  id: "/work",
  path: "/work",
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    "/work": {
      id: "/work";
      path: "/work";
      fullPath: "/work";
      preLoaderRoute: typeof CaseStudiesImport;
      parentRoute: typeof rootRoute;
    };
    "/contact": {
      id: "/contact";
      path: "/contact";
      fullPath: "/contact";
      preLoaderRoute: typeof ContactImport;
      parentRoute: typeof rootRoute;
    };
    "/projects": {
      id: "/projects";
      path: "/projects";
      fullPath: "/projects";
      preLoaderRoute: typeof ProjectsImport;
      parentRoute: typeof rootRoute;
    };
    "/routes": {
      id: "/routes";
      path: "/routes";
      fullPath: "/routes";
      preLoaderRoute: typeof RoutesImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/work": typeof CaseStudiesRoute;
  "/contact": typeof ContactRoute;
  "/projects": typeof ProjectsRoute;
  "/routes": typeof RoutesRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/work": typeof CaseStudiesRoute;
  "/contact": typeof ContactRoute;
  "/projects": typeof ProjectsRoute;
  "/routes": typeof RoutesRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/work": typeof CaseStudiesRoute;
  "/contact": typeof ContactRoute;
  "/projects": typeof ProjectsRoute;
  "/routes": typeof RoutesRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/about" | "/work" | "/contact" | "/projects" | "/routes";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/about" | "/work" | "/contact" | "/projects" | "/routes";
  id:
    | "__root__"
    | "/"
    | "/about"
    | "/work"
    | "/contact"
    | "/projects"
    | "/routes";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  CaseStudiesRoute: typeof CaseStudiesRoute;
  ContactRoute: typeof ContactRoute;
  ProjectsRoute: typeof ProjectsRoute;
  RoutesRoute: typeof RoutesRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CaseStudiesRoute: CaseStudiesRoute,
  ContactRoute: ContactRoute,
  ProjectsRoute: ProjectsRoute,
  RoutesRoute: RoutesRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/work",
        "/contact",
        "/projects",
        "/routes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/work": {
      "filePath": "case-studies.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/routes": {
      "filePath": "routes.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
